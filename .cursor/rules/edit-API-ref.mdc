# API Reference Editing Guidelines

This rule provides comprehensive guidelines for editing and maintaining API reference JSON files, particularly OpenAPI/Swagger specifications.

## Tag Management

### Tag Structure
- **Use descriptive tag names** that clearly indicate the functionality
- **Include tag descriptions** that explain what operations are grouped under each tag
- **Follow consistent naming conventions** (e.g., "Remove background", "Masking")
- **Avoid generic tags** like "API" or "Photoshop" - use specific functional tags instead

### Tag Examples
```json
"tags": [
  {
    "name": "Masking",
    "description": "Operations for creating and manipulating masks"
  },
  {
    "name": "Remove background", 
    "description": "AI-powered background removal and subject isolation operations"
  }
]
```

## Endpoint Summary Guidelines

### Format Requirements
- **Use sentence case**: First letter capitalized, rest lowercase
- **No trailing periods**
- **Remove "API" suffix** from summaries
- **Correct spelling and grammar**
- **Clear and descriptive** - should explain what the endpoint does

### Summary Examples
```json
// Good examples
"summary": "Remove background v1"
"summary": "Create mask"
"summary": "Extract document manifest"
"summary": "Apply photoshop edits"
"summary": "Product crop"

// Bad examples
"summary": "Remove Background V1"  // Title case
"summary": "Create Mask API."      // Has "API" and period
"summary": "Prodct Crop"           // Spelling error
```

## Schema Management

### Schema Naming
- **Use descriptive, consistent naming** (e.g., `PhotoroomRemoveBackgroundRequest`)
- **Follow camelCase** for property names
- **Use clear, specific names** that indicate the purpose

### Schema Organization
- **Group related schemas** together in the components section
- **Avoid duplicate schema definitions**
- **Use proper references** with `$ref` syntax
- **Include comprehensive descriptions** for complex schemas

## Endpoint Structure

### Required Elements
- **Proper tags** assignment
- **Clear summary** following guidelines
- **Descriptive operationId** (camelCase)
- **Comprehensive description** explaining functionality
- **Complete request/response schemas**
- **Proper error handling** with appropriate HTTP status codes

### Authentication
- **Include required authentication parameters** (Authorization, x-api-key)
- **Document authentication requirements** clearly
- **Use consistent parameter naming**

## Error Handling

### Standard Error Responses
Include these common error responses:
- **400** - Bad Request (InputValidationError)
- **401** - Unauthorized
- **403** - Forbidden
- **404** - Not Found
- **429** - Too Many Requests
- **500** - Internal Server Error

### Error Schema Structure
```json
"JobError": {
  "type": "object",
  "properties": {
    "error_code": {
      "type": "string",
      "description": "The error code"
    },
    "message": {
      "type": "string", 
      "description": "The error message"
    }
  }
}
```

## Version Management

### Endpoint Versioning
- **Use clear version indicators** in summaries (e.g., "v1", "v2 (beta)")
- **Maintain backward compatibility** when possible
- **Document version differences** in descriptions

### Version Examples
```json
"summary": "Remove background v1"
"summary": "Remove background v2 (beta)"
```

## File Organization

### Structure Guidelines
- **Maintain logical endpoint grouping** by functionality
- **Keep related endpoints together** (e.g., main endpoint + status endpoint)
- **Organize schemas alphabetically** or by functional groups
- **Use consistent indentation** and formatting

### Required Sections
```json
{
  "openapi": "3.0.3",
  "info": { /* API metadata */ },
  "servers": [ /* Server configurations */ ],
  "tags": [ /* Tag definitions */ ],
  "paths": { /* Endpoint definitions */ },
  "components": {
    "schemas": { /* Data models */ },
    "headers": { /* Custom headers */ },
    "securitySchemes": { /* Authentication */ }
  },
  "security": [ /* Global security */ ]
}
```

## Quality Checks

### Before Committing Changes
1. **Validate JSON syntax** - ensure valid JSON structure
2. **Check for duplicate schemas** - avoid naming conflicts
3. **Verify all $ref references** - ensure they point to existing schemas
4. **Review tag consistency** - ensure proper tagging across endpoints
5. **Test summary formatting** - follow sentence case, no periods, no "API"
6. **Validate OpenAPI specification** - use tools like Swagger Editor

### Common Issues to Avoid
- **Empty tag arrays** - assign appropriate tags or remove empty arrays
- **Inconsistent naming** - use consistent patterns across similar endpoints
- **Missing descriptions** - provide clear descriptions for all elements
- **Incomplete error handling** - include appropriate error responses
- **Spelling errors** - proofread all text content

## Documentation Standards

### Description Guidelines
- **Use clear, concise language**
- **Explain the purpose and functionality**
- **Include usage examples** where helpful
- **Document limitations or requirements**
- **Reference related endpoints** when applicable

### Example Description
```json
"description": "This endpoint allows you to remove the background from an image. The request is processed asynchronously and the status of the running job can be checked with the Get Status endpoint."
```

## Best Practices

### General Guidelines
1. **Maintain consistency** across all endpoints
2. **Follow OpenAPI 3.0 specification** standards
3. **Use descriptive names** for all elements
4. **Include comprehensive documentation**
5. **Test the specification** with validation tools
6. **Review changes** before committing
7. **Keep schemas DRY** - avoid duplication
8. **Use proper data types** and constraints

### Naming Conventions
- **Endpoints**: Use descriptive paths (e.g., `/v2/remove-background`)
- **Schemas**: Use PascalCase with descriptive names
- **Properties**: Use camelCase
- **Tags**: Use sentence case, descriptive names
- **Summaries**: Use sentence case, no periods, no "API"
description:
globs:
alwaysApply: false
---
